#!/usr/bin/env bash

set -euo pipefail

# Fonction pour afficher la bannière
print_banner() {
    cat << 'EOF'
 ____            _       _     ____        _ _     _
/ ___|  ___ _ __(_)_ __ | |_  | __ ) _   _(_) | __| | ___ _ __
\___ \ / __| '__| | '_ \| __| |  _ \| | | | | |/ _` |/ _ \ '__|
 ___) | (__| |  | | |_) | |_  | |_) | |_| | | | (_| |  __/ |
|____/ \___|_|  |_| .__/ \__| |____/ \__,_|_|_|\__,_|\___|_|
                  |_|
EOF
}

# Fonction pour créer ou modifier un fichier
create_or_modify_file() {
    local filename content

    read -p "Entrez le nom du fichier à créer ou modifier : " filename

    if [[ -f "$filename" ]]; then
        read -p "Le fichier existe. Voulez-vous (a)jouter, (é)craser, ou (m)odifier ? " choice
        case "$choice" in
            a|A) 
                echo "Entrez le contenu à ajouter (CTRL+D pour terminer) :"
                cat >> "$filename"
                ;;
            e|E|é|É) 
                echo "Entrez le nouveau contenu (CTRL+D pour terminer) :"
                cat > "$filename"
                ;;
            m|M) 
                ${EDITOR:-nano} "$filename"
                ;;
            *) 
                echo "Choix invalide. Aucune modification effectuée."
                return 1
                ;;
        esac
    else
        echo "Entrez le contenu du nouveau fichier (CTRL+D pour terminer) :"
        cat > "$filename"
    fi

    echo "Opération sur le fichier terminée avec succès."
}

# Fonction pour gérer les fichiers C
handle_c_files() {
    local c_file output_file compiler_flags

    read -p "Entrez le nom du fichier C à compiler : " c_file

    if [[ ! "$c_file" =~ \.c$ ]]; then
        echo "Erreur : Le fichier doit avoir une extension .c"
        return 1
    fi

    read -p "Entrez les flags du compilateur (ex: '-Wall -Werror -Wextra -pedantic -std=gnu89') : " compiler_flags
    read -p "Entrez le nom du fichier de sortie : " output_file

    if gcc $compiler_flags "$c_file" -o "$output_file"; then
        echo "Compilation réussie. Exécution du programme :"
        ./"$output_file"
    else
        echo "La compilation a échoué."
        return 1
    fi
}

# Fonction pour gérer les opérations Git
handle_git() {
    local files_to_add commit_message remote_branch

    read -p "Entrez les noms des fichiers à ajouter au dépôt Git (séparés par des espaces) : " -a files_to_add
    for file in "${files_to_add[@]}"; do
        if [[ -e "$file" ]]; then
            git add "$file"
            echo "Fichier '$file' ajouté à Git."
        else
            echo "Erreur : Fichier '$file' non trouvé."
        fi
    done

    read -p "Entrez le message de commit : " commit_message
    git commit -m "$commit_message"

    read -p "Entrez le nom de la branche distante pour le push : " remote_branch
    git push origin "$remote_branch"

    echo "Opérations Git terminées."
}

# Menu principal
main_menu() {
    while true; do
        clear
        print_banner
        echo "1. Créer ou modifier un fichier"
        echo "2. Gérer les fichiers C"
        echo "3. Gérer Git"
        echo "0. Quitter"
        echo "Appuyez sur 'q' à tout moment pour quitter"
        read -p "Choisissez une option : " choice

        case $choice in
            1) create_or_modify_file ;;
            2) handle_c_files ;;
            3) handle_git ;;
            0|q) exit 0 ;;
            *) echo "Option invalide. Veuillez réessayer." ;;
        esac

        read -n 1 -s -r -p "Appuyez sur une touche pour continuer..."
    done
}

# Gestion de l'interruption du script
trap 'echo "Script interrompu."; exit 1' INT

# Démarrage du script
main_menu
